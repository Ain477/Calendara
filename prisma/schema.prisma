// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  // Do not use foreign keys (PlanetScale does not support them) --- Now they do lol
  relationMode = "prisma"
}

enum DateFormat {
  MMDDYY
  MMDDYYYY
  DDMMYY
  DDMMYYYY
}

enum OnboardingStep {
  CREATE_WORKSPACE
  CONNECT_CALENDAR
  EDIT_CALENDAR
  CREATE_SCHEDULE
  FEEDBACK
  DONE
}

model User {
  id               String         @id @unique
  email            String?        @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String?
  lastName         String?
  phoneNumber      String?
  timezone         String?
  militaryTime     Boolean        @default(true)
  preferredLang    String?
  onboardingStatus OnboardingStep @default(CREATE_WORKSPACE)
  teamMembers      TeamMember[]

  @@index([id])
}

model Workspace {
  id                   String        @id @unique @default(cuid())
  ownerID              String
  name                 String
  link                 String       @unique
  scheduleID           String?
  workspaceDescription String?
  location             String?
  locationDescription  String?
  workspaceLogoURL     String?
  timeZone             String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  teamMembers          TeamMember[]
  events               Event[]
  schedules            Schedule[]
  clients              Client[]
  bookedEvents         BookedEvent[]

  @@index([id])
}

enum Role {
  OWNER
  ADMIN
  HELPER
  VIEWER
}

model TeamMember {
  id          String    @id @unique @default(cuid())
  user        User      @relation(fields: [userID], references: [id])
  userID      String
  workspace   Workspace @relation(fields: [workspaceID], references: [id])
  workspaceID String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role

  @@index([id])
  @@index([workspaceID])
  @@index([userID])
}

enum EventState {
  LIVE
  OFF
  DRAFT
}

enum EventVisibility {
  PUBLIC
  LINK_ONLY
}

enum DateRangeAvailability {
  INDEFINETLY_FUTURE
  WITHIN_DATES
  DAYS_IN_FUTURE
}

enum DateRangeAvailabilityInTheFuture {
  WEEK_DAYS
  CALENDAR_DAYS
}

enum EventColors {
  LIGHT_BLUE_SKY
  GREEN_ELECTRIC
  YELLOW_SUNSHINE
  ORANGE_PEACH
  VIOLET_MARKER
  PINK_CANDY
}

model Event {
  id                               String                           @id @unique @default(cuid())
  createdAt                        DateTime                         @default(now())
  updatedAt                        DateTime                         @updatedAt
  // Event information
  name                             String
  color                            EventColors
  link                             String                           @unique
  duration                         Int                              @default(30) //in minutes 
  description                      String?
  locations                        Json?
  state                            EventState
  visibility                       EventVisibility                  @default(PUBLIC)
  // Schedule Settings
  pickingRange                     DateRangeAvailability            @default(INDEFINETLY_FUTURE)
  availableFrom                    DateTime?
  avialableUntil                   DateTime?
  dateRangeAvailabilityInTheFuture DateRangeAvailabilityInTheFuture @default(CALENDAR_DAYS)
  availableFor                     Int?
  minutesBeforeNextEvent           Int                              @default(10)
  minutesAfterPreviousEvent        Int                              @default(10)
  maxNumberOfEventsPerDay          Int?                             @default(12)
  minNoticeHours                   Int                              @default(24)
  availabilitySlotsSpacingMinutes  Int                              @default(20)
  includeHolidays                  Boolean                          @default(true)
  // Payment Options
  isPayedEvent                     Boolean                          @default(false)
  requireOnlinePayment             Boolean                          @default(true)
  showPricing                      Boolean                          @default(true)
  price                            Int?
  paymentOptions                   Json?
  // Booking Options
  askForName                       Boolean                          @default(true)
  askForLastName                   Boolean                          @default(true)
  askForEmail                      Boolean                          @default(true)
  askForNumber                     Boolean                          @default(true)
  questions                        Json?
  // Reminders and notifications
  requestUserForConfirmation       Boolean                          @default(true)
  requestConfirmationHours         Int?                             @default(24)
  remindOneDayBefore               Boolean                          @default(true)
  remindTwoDaysBefore              Boolean                          @default(false)
  remindOneWeekBefore              Boolean                          @default(true)
  remindTwoWeekBefore              Boolean                          @default(false)
  remindOneMonthBefore             Boolean                          @default(false)
  attachments                      Json?
  workspace                        Workspace                        @relation(fields: [workspaceID], references: [id])
  workspaceID                      String
  schedule                         Schedule?                        @relation(fields: [scheduleID], references: [id])
  scheduleID                       String?
  bookedEvents                     BookedEvent[]

  @@index([id])
  @@index([scheduleID])
  @@index([workspaceID])
}

model Schedule {
  id           String    @id @unique @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  days         Json
  specialDates Json
  timeZone     String
  workspace    Workspace @relation(fields: [workspaceID], references: [id])
  workspaceID  String
  events       Event[]

  @@index([workspaceID])
}

model Holidays {
  id           String @id @unique @default(cuid())
  workspaceId  String
  specialDates Json?

  @@index([id])
}

enum PaymentTypes {
  BANCO_AGRICOLA
  STRIPE
  PAYPAL
  BANK_TRANSFER
  CASH
}

model Client {
  id           String        @id @unique @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String?
  phoneNumber  String?
  name         String?
  lastName     String?
  workspace    Workspace     @relation(fields: [workspaceID], references: [id])
  workspaceID  String
  bookedEvents BookedEvent[]

  @@index([id])
  @@index([workspaceID])
}

enum BookedEventState {
  CANCELLED
  RESCHEDULED
  PENDING
  FINISHED
}

enum NotificationStatus {
  NONE
  ONE_HOUR
  HALF_DAY
  ONE_DAY
  TWO_DAYS
  THREE_DAYS
  FOUR_DAYS
  FIVE_DAYS
  SIX_DAYS
  ONE_WEEK
  TWO_WEEKS
  ONE_MONTH
}

model BookedEvent {
  id               String             @id @unique @default(cuid())
  dueDate          DateTime
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  state            BookedEventState   @default(PENDING)
  lastNotification NotificationStatus @default(NONE)
  nextNotification NotificationStatus @default(NONE)
  client           Client             @relation(fields: [clientID], references: [id])
  clientID         String
  workspace        Workspace          @relation(fields: [workspaceID], references: [id])
  workspaceID      String
  event            Event              @relation(fields: [eventID], references: [id])
  eventID          String

  @@index([id])
  @@index([clientID])
  @@index([workspaceID])
  @@index([eventID])
}
